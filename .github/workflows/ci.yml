name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write

env:
  NODE_VERSION: lts/*

jobs:
  install:
    name: Prepare deps cache
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Compute cache key parts
        id: vars
        run: |
          echo "NODE_FULL_VERSION=$(node -p 'process.versions.node')" >> "$GITHUB_OUTPUT"
          echo "PLAYWRIGHT_VERSION=$(node -p "require('./package.json').devDependencies['@playwright/test'] || ''")" >> "$GITHUB_OUTPUT"
      - name: Restore node_modules cache
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-node${{ steps.vars.outputs.NODE_FULL_VERSION }}-${{ hashFiles('package-lock.json') }}
      - name: Install deps (cache miss)
        if: steps.cache-restore.outputs.cache-hit != 'true'
        run: npm ci
      - name: Save node_modules cache (first producer only)
        if: steps.cache-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-node${{ steps.vars.outputs.NODE_FULL_VERSION }}-${{ hashFiles('package-lock.json') }}

  lint:
    name: Lint
    needs: install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Compute cache key parts
        id: vars
        run: echo "NODE_FULL_VERSION=$(node -p 'process.versions.node')" >> "$GITHUB_OUTPUT"
      - name: Restore node_modules cache
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-node${{ steps.vars.outputs.NODE_FULL_VERSION }}-${{ hashFiles('package-lock.json') }}
      - name: Run ESLint
        run: npm run lint

  format:
    name: Format check
    needs: install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Compute cache key parts
        id: vars
        run: echo "NODE_FULL_VERSION=$(node -p 'process.versions.node')" >> "$GITHUB_OUTPUT"
      - name: Restore node_modules cache
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-node${{ steps.vars.outputs.NODE_FULL_VERSION }}-${{ hashFiles('package-lock.json') }}
      - name: Run Prettier check
        run: npm run format:check

  typecheck:
    name: Type check
    needs: install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Compute cache key parts
        id: vars
        run: echo "NODE_FULL_VERSION=$(node -p 'process.versions.node')" >> "$GITHUB_OUTPUT"
      - name: Restore node_modules cache
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-node${{ steps.vars.outputs.NODE_FULL_VERSION }}-${{ hashFiles('package-lock.json') }}
      - name: Run TypeScript typecheck
        run: npm run typecheck

  build:
    name: Build
    needs: install
    runs-on: ubuntu-latest
    env:
      NODE_ENV: production
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Compute cache key parts
        id: vars
        run: echo "NODE_FULL_VERSION=$(node -p 'process.versions.node')" >> "$GITHUB_OUTPUT"
      - name: Restore node_modules cache
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-node${{ steps.vars.outputs.NODE_FULL_VERSION }}-${{ hashFiles('package-lock.json') }}
      - name: Build
        run: npm run build

  test:
    name: Test
    needs: install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Compute cache key parts
        id: vars
        run: echo "NODE_FULL_VERSION=$(node -p 'process.versions.node')" >> "$GITHUB_OUTPUT"
      - name: Restore node_modules cache
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-node${{ steps.vars.outputs.NODE_FULL_VERSION }}-${{ hashFiles('package-lock.json') }}
      - name: Run tests
        run: npm run test:coverage
      - name: Restore wrangler.toml from secrets
        if: always()
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]] || ([[ "${{ github.event_name }}" == "pull_request" ]] && [[ "${{ github.base_ref }}" == "develop" ]]); then
            WORKER_NAME="template-nextjs15-supabase-develop-unit-test"
          else
            WORKER_NAME="template-nextjs15-supabase-unit-test"
          fi
          cat > wrangler.toml <<EOF
          name = "$WORKER_NAME"
          account_id = "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}"
          compatibility_date = "2024-01-01"
          [assets]
          directory = "./coverage"
          EOF
      - name: Preview Deploy unit test coverage report to Cloudflare Workers
        if: always()
        id: deploy-unit-test
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: |
            versions upload
      - name: Comment PR with unit test deployment URL
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = '${{ steps.deploy-unit-test.outputs.deployment-url }}';
            if (deploymentUrl) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `📊 **Unit Test Coverage Report**\n\nDeployment URL: ${deploymentUrl}`
              });
            }
      - name: Deploy unit test coverage report (main/develop)
        if: always() && github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy

  e2e:
    name: E2E
    needs: install
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        shard: [1]
    container:
      # Playwrightの公式イメージを使用（ブラウザとシステム依存関係がプリインストール済み）
      image: mcr.microsoft.com/playwright:v1.54.2-jammy
      options: --user 1001
    steps:
      - uses: actions/checkout@v4
      - name: Get Playwright version from package.json
        id: playwright-version
        run: |
          PLAYWRIGHT_VERSION=$(node -p "require('./package.json').devDependencies['@playwright/test'] || '1.40.0'")
          echo "version=$PLAYWRIGHT_VERSION" >> "$GITHUB_OUTPUT"
      # node_modulesをコンテナ内で復元
      - name: Restore node_modules cache
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-node-20-${{ hashFiles('package-lock.json') }}
      # npm ciが必要な場合のみ実行
      - name: Install dependencies if needed
        run: |
          if [ ! -d "node_modules" ]; then
            npm ci
          fi
      - name: Run Playwright tests (shard ${{ matrix.shard }}/1)
        run: npx playwright test --shard=${{ matrix.shard }}/1
        env:
          PLAYWRIGHT_TEST_BASE_URL: ${{ secrets.PLAYWRIGHT_TEST_BASE_URL }}
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
      - name: Upload Playwright HTML report
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report-${{ matrix.shard }}
          path: playwright-report/
          retention-days: 30
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-shard-${{ matrix.shard }}
          path: test-results/
          retention-days: 30
      - name: Restore wrangler.toml from secrets
        if: always()
        run: |
          if [ "${{ github.ref }}" = "refs/heads/develop" ] || ([ "${{ github.event_name }}" = "pull_request" ] && [ "${{ github.base_ref }}" = "develop" ]); then
            WORKER_NAME="template-nextjs15-supabase-develop-e2e-test"
          else
            WORKER_NAME="template-nextjs15-supabase-e2e-test"
          fi
          cat > wrangler.toml <<EOF
          name = "$WORKER_NAME"
          account_id = "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}"
          compatibility_date = "2024-01-01"
          [assets]
          directory = "./playwright-report"
          EOF
      - name: Preview Deploy e2e test report to Cloudflare Workers
        if: always()
        id: deploy-e2e-test
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: |
            versions upload
      - name: Comment PR with e2e test deployment URL
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = '${{ steps.deploy-e2e-test.outputs.deployment-url }}';
            if (deploymentUrl) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: `🎭 **E2E Test Report**\n\nDeployment URL: ${deploymentUrl}`
              });
            }
      - name: Deploy e2e test report (main/develop)
        if: always() && github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy
